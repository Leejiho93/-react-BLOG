{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST } from '../reducers/post';\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          put({\n            type: ADD_POST_SUCCESS\n          });\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          put({\n            type: ADD_POST_FAILURE\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment() {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          put({\n            type: ADD_COMMENT_SUCCESS\n          });\n          _context3.next = 10;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          put({\n            type: ADD_COMMENT_FAILURE\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/BLOG/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","postSage","all","delay","fork","put","takeLatest","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","addPostAPI","type","console","error","addCommentAPI"],"mappings":";;oDAcUA,O;qDAcAC,Y;qDASAC,U;qDAcAC,e;qDAKeC,Q;;AAxDzB,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,QAM8B,kBAN9B;;AASA,SAASC,UAAT,GAAsB,CAErB;;AAED,SAAUhB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAFR;AAGQE,UAAAA,GAAG,CAAC;AACAS,YAAAA,IAAI,EAAEL;AADN,WAAD,CAAH;AAHR;AAAA;;AAAA;AAAA;AAAA;AAOQM,UAAAA,OAAO,CAACC,KAAR;AACAX,UAAAA,GAAG,CAAC;AACAS,YAAAA,IAAI,EAAEN;AADN,WAAD,CAAH;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACC,gBAAD,EAAmBV,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAASoB,aAAT,GAAyB,CAExB;;AAED,SAAUlB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMI,KAAK,CAAC,IAAD,CAAX;;AAFR;AAGQE,UAAAA,GAAG,CAAC;AACAS,YAAAA,IAAI,EAAEJ;AADN,WAAD,CAAH;AAHR;AAAA;;AAAA;AAAA;AAAA;AAOQK,UAAAA,OAAO,CAACC,KAAR;AACAX,UAAAA,GAAG,CAAC;AACAS,YAAAA,IAAI,EAAEH;AADN,WAAD,CAAH;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACM,mBAAD,EAAsBb,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACN,YAAD,CADE,EAENM,IAAI,CAACJ,eAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, delay, fork, put, takeLatest} from 'redux-saga/effects';\r\nimport { \r\n    ADD_POST_REQUEST, \r\n    ADD_POST_FAILURE, \r\n    ADD_POST_SUCCESS, \r\n    ADD_COMMENT_SUCCESS, \r\n    ADD_COMMENT_FAILURE, \r\n    ADD_COMMENT_REQUEST} from '../reducers/post';\r\n\r\n\r\nfunction addPostAPI() {\r\n\r\n}\r\n\r\nfunction* addPost() {\r\n    try {\r\n        yield delay(2000);\r\n        put({\r\n            type: ADD_POST_SUCCESS,\r\n        })\r\n    } catch(e) {\r\n        console.error(e);\r\n        put({\r\n            type: ADD_POST_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\n\r\nfunction addCommentAPI() {\r\n    \r\n}\r\n\r\nfunction* addComment() {\r\n    try {\r\n        yield delay(2000);\r\n        put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n        })\r\n    } catch(e) {\r\n        console.error(e);\r\n        put({\r\n            type: ADD_COMMENT_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\n\r\nexport default function* postSage() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment)\r\n    ])\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}